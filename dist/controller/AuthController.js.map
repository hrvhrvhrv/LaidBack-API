{"version":3,"sources":["../../src/controller/AuthController.js"],"names":["config","db","api","post","req","res","hashedPassword","Bcrypt","hashSync","body","password","newPupil","Pupil","firstName","lastName","email","phoneNumber","registration","provisional","theoryTest","previousLessons","location","availability","save","err","status","json","error","message","success","token","JWT","sign","id","_id","secret","expiresIn","auth","idToken","findOne","user","passwordIsValid","compareSync","localId","role","get","send"],"mappings":"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","file":"AuthController.js","sourcesContent":["import {Router} from 'express';\nimport Pupil from '../model/Pupil';\n\n\n// import VerifyToken from '../middleware/authMiddleware';\nimport {verifyToken} from '../middleware/authMiddleware';\n\n/*\n* configure JWT\n* */\nimport JWT from 'jsonwebtoken';\nimport Bcrypt from 'bcryptjs';\nimport config from '../config/index';\n\n\nexport default ({config, db}) => {\n    let api = Router();\n\n    // - - - - - - - - - - - - - - - - - -\n    // register an account\n    // /v1/account/add\n    api.post('/register', (req, res) => {\n        // Pupil.findOne({email: req.body.email}, function (err, user) {\n        //     if (user) {\n        //         res.send({\n        //             error: err,\n        //             message: \"Email already exists\",\n        //             success: false\n        //         },401);\n        //         console.log(err)\n        //     } else {\n\n                let hashedPassword = Bcrypt.hashSync(req.body.password, 8);\n\n                let newPupil = new Pupil();\n                newPupil.firstName = req.body.firstName;\n                newPupil.lastName = req.body.lastName;\n                newPupil.email = req.body.email;\n                newPupil.phoneNumber = req.body.phoneNumber;\n                newPupil.password = hashedPassword;\n                newPupil.registration.provisional = req.body.provisional;\n                newPupil.registration.theoryTest = req.body.theoryTest;\n                newPupil.registration.previousLessons = req.body.previousLessons;\n                newPupil.location = req.body.location;\n                newPupil.availability = req.body.availability;\n\n                newPupil.save(err => {\n                    if (err) return res.status(401).json({\n                        error: err,\n                        message: \"There has been an error registering pupil. Please Try again\",\n                        success: false\n                    });\n\n                    // if user is registered without errors\n                    // create a token\n                    let token = JWT.sign({id: newPupil._id}, config.secret, {\n                        expiresIn: 86400 // expires in 24 hours\n                    });\n\n                    res.status(200).json({\n                        auth: true,\n                        idToken: token,\n                        message: \"Account successfully registered\",\n                        success: true\n                    });\n\n                });\n        //     }\n        //\n        // });\n\n    });\n\n\n    // - - - - - - - - - - - - - - - - - -\n    // login\n    // /v1/account/login\n    api.post('/login', (req, res) => {\n\n        Pupil.findOne({email: req.body.email}, function (err, user) {\n            if (err) return res.status(500).json({\n                error: err,\n                message: \"Error on the server: \" + err + \". Please Try again\",\n                success: false\n            });\n            if (!user) return res.status(404).json({\n                message: \"user not found please try again\",\n                success: false\n            });\n\n            // check if the password is valid\n            let passwordIsValid = Bcrypt.compareSync(req.body.password, user.password);\n            if (!passwordIsValid) return res.status(401).json({\n                auth: false,\n                idToken: null,\n                message: \"Your password was invalid\",\n                success: false,\n\n            });\n\n            // if user is found and password is valid\n            // create a token\n            let token = JWT.sign({id: user._id}, config.secret, {\n                expiresIn: 86400 // expires in 24 hours\n            });\n\n            // return the information including token as JSON\n            res.status(200).json({\n                auth: true,\n                idToken: token,\n                message: \"You have successfully logged in\",\n                success: true,\n                localId: user._id,\n                role: user.role,\n                expiresIn: 86400 // 24hrs\n            });\n        });\n\n    });\n\n// - - - - - - - - - - - - - - - - - -\n    // login\n    // /v1/account/login\n    api.get('/logout', (req, res) => {\n        res.status(200).send({auth: false, idToken: null, message: \"You have successfully logged out\"});\n    });\n\n\n    // - - - - - - - -\n    // Return API at the bottom of the export\n    return api;\n\n}"]}